#!/usr/bin/python3
#
# eos-dropbox-app: launcher script to launch Dropbox
#
# Copyright (C) 2017 Endless Mobile, Inc.
# Authors:
#  Mario Sanchez Prada <mario@endlessm.com>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

import argparse
import glob
import json
import logging
import os
import subprocess
import sys

from gi.repository import Gio
from gi.repository import GLib


DROPBOX_CONFIG = "~/.dropbox/info.json"
DROPBOX_LAUNCHER  = "/app/extra/.dropbox-dist/dropboxd"
DROPBOX_DEFAULT_DIR  = "~/Dropbox"


def launch_dropbox_daemon():
    logging.info("Launching Dropbox's daemon at {}...".format(DROPBOX_LAUNCHER))
    subprocess.Popen([DROPBOX_LAUNCHER])


def get_default_dropbox_directory():
    default_dir = os.path.expanduser(DROPBOX_DEFAULT_DIR)

    if os.path.isdir(default_dir):
        return default_dir

    # No 'Dropbox' directory found, our last attempt will be to look for a Dropbox
    # team folder, used in 'business' accounts (e.g. 'Dropbox (Endless Team)')
    team_dir = glob.glob(default_dir + ' (*)')
    if team_dir:
        return team_dir[0]

    # If no Dropbox folder found, that means that the user has not
    # configured Dropbox yet, so there's not much we can do now
    return None


def get_dropbox_directory():
    dropbox_dir = None
    config_path = os.path.expanduser(DROPBOX_CONFIG)

    logging.info("Looking for Dropbox configuration...")
    if not os.path.exists(config_path):
        logging.info('Dropbox configuration not found')
        return None

    with open(config_path, 'r') as config:
        logging.info('Found Dropbox configuration at {}'.format(config_path))

        path = None
        account_type = None

        data = config.read()
        try:
            json_data = json.loads(data)
        except ValueError as e:
            logging.warning('Error loading JSON data from {}: {}'.format(DROPBOX_CONFIG, str(e)))

        # Search for valid user configuration (containing 'path')
        # and for the type of account (for logging purposes)
        for type_name in json_data:
            if 'path' in json_data[type_name]:
                path = json_data[type_name]['path']
                account_type = type_name
                break

        if path:
            try:
                dropbox_dir = os.path.expanduser(path)
                logging.info('Found configured Dropbox directory at {} ({} account)'
                             .format(dropbox_dir, account_type))
            except KeyError:
                logging.warning('Could not find Dropbox directory in user\'s configuration')
        else:
            logging.warning('Could not find user\'s configuration in Dropbox\'s configuration file')

    if not dropbox_dir:
        logging.warning('Could not find a valid Dropbox directory in the configuration. Falling back to defaults...')
        dropbox_dir = get_default_dropbox_directory()

    return dropbox_dir


def exitOnError(message):
    logging.error(message)
    sys.exit(1)


def open_dropbox_directory():
    directory = get_dropbox_directory()

    if not directory:
        logging.warning('User has not configured Dropbox yet')
        return
    elif not os.path.isdir(directory):
        exitOnError("{} is not a directory!".format(directory))

    uri = "file://{}".format(os.path.expanduser(directory))

    try:
        bus = Gio.bus_get_sync(Gio.BusType.SESSION, None)
        proxy = Gio.DBusProxy.new_sync(bus, Gio.DBusProxyFlags.NONE,
                                       None,
                                       'org.freedesktop.portal.Desktop',
                                       '/org/freedesktop/portal/desktop',
                                       'org.freedesktop.portal.OpenURI',
                                       None)

        logging.info("Opening Dropbox directory at {}...".format(uri))
        proxy.OpenURI('(ssa{sv})',
                      '',                          # Parent window ID
                      uri,                         # URI
                      GLib.Variant('a{sv}', None)) # Options
    except GLib.Error as e:
        exitOnError("Could not launch the OpenURI portal for {}: {}".format(uri, e.message))


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument("--debug", dest="debug", action="store_true")

    parsed_args = parser.parse_args()
    if parsed_args.debug:
        logging.basicConfig(level=logging.INFO)

    # XXX: This launches a new daemon instance each time which is not ideal
    # and should be fixed. See https://phabricator.endlessm.com/T15115.
    #
    # Simple solutions like checking the ~/.dropbox/dropbox.pid are unfortunately
    # not possible since this runs inside the Flatpak sandbox but a way to detect
    # whether this is already running should be implemented in the future.
    logging.info("Attempting to run eos-dropbox-app launcher...")
    launch_dropbox_daemon()

    logging.info("Attempting to open Dropbox directory...")
    open_dropbox_directory()
